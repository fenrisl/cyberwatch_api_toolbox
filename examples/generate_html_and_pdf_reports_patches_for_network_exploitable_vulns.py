"""Example: generate HTML and PDF reports"""

import os
from configparser import ConfigParser
import pdfkit # pylint: disable=import-error
from cbw_api_toolbox.cbw_api import CBWApi

# Requires wkhtmltopdf
# See https://github.com/JazzCore/python-pdfkit for details

CONF = ConfigParser()
CONF.read(os.path.join(os.path.abspath(os.path.dirname(__file__)), '..', 'api.conf'))
CLIENT = CBWApi(CONF.get('cyberwatch', 'url'), CONF.get('cyberwatch', 'api_key'), CONF.get('cyberwatch', 'secret_key'))

print("INFO:Checking access...")
CLIENT.ping()

print("INFO:Fetching CVEs list, with filters: exploitable and vector_access_network...")
PARAMETERS_CVE = {"exploitable": "true", "active": "true"}
CVE_ANNOUNCEMENTS_ALL = CLIENT.cve_announcements(PARAMETERS_CVE)
# List of CVEs with full info
FILTERED_CVE_ANNOUNCEMENTS = [cve for cve in CVE_ANNOUNCEMENTS_ALL if ((cve.cvss_v3 is not None) and (cve.cvss_v3["access_vector"] == "access_vector_network"))]
# List of CVEs with only CVE codes
FILTERED_CVE_CODES = [cve.cve_code for cve in FILTERED_CVE_ANNOUNCEMENTS]

print("INFO:Fetching assets list...")
SERVERS = CLIENT.servers()
# SERVERS = SERVERS[:5] # For testing purpose
print("INFO:Done.")

PRE_EXPORTED = """<html>
<head>
<style type="text/css">
table {
  color: #333;
  background: white;
  border: 1px solid grey;
  font-size: 12pt;
  border-collapse: collapse;
}
table thead th,
table tfoot th {
  color: #777;
  background: rgba(0,0,0,.1);
}
table caption {
  padding:.5em;
}
table th,
table td {
  padding: .5em;
  border: 1px solid lightgrey;
}
.critical {
  color: red;
  font-weight: bold;
}
table.cves tr th:first-child,
table.cves tr td:first-child {
  width: 130px;
  min-width: 130px;
  max-width: 130px;
  word-break: break-all;
}
</style>
</head>
<body width='595pt'>
"""

GLOBAL_COUNTERS = {"low": 0, "medium": 0, "high": 0, "critical": 0, "critical with exploit": 0}

# -----------------
# Report per computer
# -----------------
i = 0
EXPORTED = ""
for server in SERVERS:
    print("INFO:Generating " + str(server.hostname) + " part...")
    print("--- fetching details...")
    server = CLIENT.server(str(server.id))
    EXPORTED += "<h2>"+ str(server.hostname) +"</h2>"
    # -------------------
    # Recommended actions
    # -------------------
    print("--- generating details for recommended actions...")
    EXPORTED += "<h3>Recommended actions for "+str(server.hostname)+"</h3>"
    EXPORTED += "<table border=\"1\" >"
    EXPORTED += "<tr><th>" + "</th><th>".join(
                "CVEs (only exploitable with access vector: network),Product,Current version,Target version".split(",")) + "</th></tr>"
    # Add details for recommended actions
    for update in server.updates:
        #print(update)
        #print(update["cve_announcements"])
        #print(update["current"])
        #print(update["target"])
        # CVE codes
        cves_to_add = []
        for cve in update["cve_announcements"]:
            # Check if the CVE is in the filtered list
            if cve in FILTERED_CVE_CODES:
                cves_to_add.append(cve)
        # Next actions happen only if at least one CVE is in the filters
        if len(cves_to_add) != 0:
            # Creating a line
            to_insert = "<tr>"
            to_insert += "<td>" + ', '.join(cves_to_add) + "</td>"
            # If it's a KB, there is no "current" version, only a target
            if update["target"]["type"] == 'Packages::Kb':
                # Product
                to_insert += "<td>Microsoft Update</td>"
                # Current version
                to_insert += "<td>-</td>"
                # Target version
                to_insert += "<td>" + update["target"]["product"] + " / Microsoft UUID " + update["target"]["version"] + "</td>"
            # If it's not a KB, there is a current version and a target
            else:
                # Product
                to_insert += "<td>" + update["current"]["product"] + "</td>"
                # Current version
                to_insert += "<td>" + update["current"]["version"] + "</td>"
                # Target version
                to_insert += "<td>" + update["target"]["version"] + "</td>"
            # End of line
            to_insert += "</tr>"
            EXPORTED += to_insert
    # Complete recommended actions
    EXPORTED += "</table>"
    # Page break
    EXPORTED += "<div style = \"display:block; clear:both; page-break-after:always;\"></div>"

# -----------------
# Generate the HTML
# -----------------
# Generate the pre-report part
PRE_EXPORTED += "<h1>Report generated with Cyberwatch API</h1>"

# Add the footer
EXPORTED += """</body>
</html>"""

EXPORTED = PRE_EXPORTED + EXPORTED

print("INFO:Generating HTML...")
FILEOUT = open("report.html", "w")
FILEOUT.writelines(EXPORTED)
FILEOUT.close()
print("INFO:Done.")

# ----------------
# Generate the PDF
# ----------------

print("INFO:Generating PDF...")
pdfkit.from_file('report.html', 'report.pdf')
print("INFO:Done.")
print("INFO:End of script.")
